/*
 * Client-side user session object, maintained by local (browser) 
 * storage and calls to a remote server. Provides e.g. openid 
 * login id for greasemonkey-based mashups.
 *
 * Copyright 2012, Jan Chimiak <jan.chimiak@gmail.com>
 * 
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 */
(function(a){if(!a.$){throw"ClientSideUserSession has an unmet dependency: jQuery";
}if(!a.console){throw"ClientSideUserSession has an unmet dependency: console";}var b=function(c){if(!c.url){throw"Wrong session config: url is undefined";}if(!c.store){throw"Wrong session config: store is undefined";}if(!c.ajax){throw"Wrong session config: ajax is undefined";}for(var d in c){if(c.hasOwnProperty(d)){this[d]=c[d];}}this.timestamp=this.store.getValue("session-timestamp",0);this.username=this.store.getValue("session-username",undefined);
this.renderLoginPanel();this.renderOpenId();this.evaluate();};$.extend(true,b.prototype,{panel:{renderTo:"body:first",style:"display: inline-block; position: absolute; top: 5px; left: 5px;"},language:{login:"Sign in",logout:"Log out",logoutMsgNoname:"Log out",logoutMsg:"Logged in as ${username}.<br/> Click here to log out."},timeout:180000,timestamp:0,renderOpenId:function(){var c;if(this.openid.provider==="janrain"){$("#session-login-panel > a:first").addClass(this.openid.initCls);
c=document.createElement("script");c.innerHTML=this.openid.script;document.getElementsByTagName("head")[0].appendChild(c);}},renderLoginPanel:function(){var c=$(this.panel.renderTo);if(!c){throw"Wrong session config: renderTo points to no known DOM nodes";}$(c).append('<div id="session-panel">'+'<div id="session-login-panel">'+'<a class="session-login session-hidden session-only-unauthenticated" onclick="return false;" href="#">'+this.language.login+"</a>"+"</div>"+'<div id="session-logout-panel">'+'<a class="session-logout session-hidden session-only-authenticated" onclick="return false;" href="">'+this.language.logout+"</a>"+"</div>"+"</div>");
$("#session-login-panel",c).click($.proxy(function(){this.store.setValue("session-signin-location",document.location.href);this.store.setValue("session-signin-timestamp",this.timestamp);},this));$("#session-logout-panel",c).click($.proxy(function(){this.ajax.getJson({params:{action:"logout"},url:this.url,onSuccess:$.proxy(function(){this.reevaluate();},this)});},this));$("head:first").append('<style type="text/css">'+"#session-panel { "+this.panel.style+"}"+".session-hidden { display: none !important;}"+"</style>");
},evaluate:function(){if(document.location.href.match(/#auth$/)){console.info("New session detected");this.flushStore();this.loadFromServer();}else{console.debug("Session is not new");if(this.store.getValue("session-established",false)===true){console.debug("Session data is available");if((new Date()).getTime()-this.store.getValue("session-timestamp",0)>this.timeout){console.info("Session for user ${username} expired".replace("${username}",this.username));
this.flushStore();this.loadFromServer();}else{console.debug("Session for user ${username} has not expired yet".replace("${username}",this.username));console.debug("Loading session from local store");this.timestamp=this.store.getValue("session-timestamp",0);this.username=this.store.getValue("session-username",undefined);this.onEstablished(this);window.setTimeout($.proxy(this.evaluate,this),this.timeout);
}}else{console.debug("Session data is not available, requery from server is required");this.loadFromServer();}}},flushStore:function(){console.debug("Flushing session data in local store");this.store.setValue("session-timestamp",0);this.store.setValue("session-locked",false);this.store.setValue("session-established",false);this.store.deleteValue("session-username");},loadFromServer:function(){if(this.store.getValue("session-locked",false)===true){console.debug("Server access is locked - session is being loaded from server in another tab");
window.setTimeout($.proxy(this.evaluate,this),100);return;}console.debug("Loading session from server");this.ajax.getJson({params:{action:"ident"},url:this.url,onSuccess:$.proxy(function(c){console.debug("Session data was successfully received from server");var d=(new Date()).getTime().toString();this.store.setValue("session-timestamp",d);this.timestamp=d;this.store.setValue("session-username",c.username);
this.username=c.username;this.store.setValue("session-established",true);this.store.setValue("session-locked",false);this.onEstablished(this);window.setTimeout($.proxy(this.evaluate,this),this.timeout);},this),onFailure:$.proxy(function(c){console.debug("Session was not loaded from server");this.username=undefined;var d=new Date().getTime().toString();this.store.setValue("session-timestamp",d);this.timestamp=d;
this.store.setValue("session-established",true);this.store.setValue("session-locked",false);this.onEstablished(this);window.setTimeout($.proxy(this.evaluate,this),this.timeout);},this)});},onEstablished:function(c){if(c.username===undefined){console.info("Unauthenticated browser tab");$(".session-logout").text(this.language.logoutMsgNoname);}else{console.info("Authenticated as ${username}".replace("${username}",c.username));
$(".session-logout").html(this.language.logoutMsg.replace("${username}",c.username));if(document.location.href.match(/#auth$/)){if(((new Date()).getTime()-this.store.getValue("session-signin-timestamp")<this.timeout)&&this.store.getValue("session-signin-location",false)){document.location.href=this.store.getValue("session-signin-location");}}}this.toggleContext();},toggleContext:function(){if(this.username===undefined){$(".session-only-authenticated").addClass("session-hidden");
$(".session-only-unauthenticated").removeClass("session-hidden");}else{$(".session-only-unauthenticated").addClass("session-hidden");$(".session-only-authenticated").removeClass("session-hidden");}},reevaluate:function(){this.flushStore();this.evaluate();}});a.ClientSideUserSession=b;})(this);